{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6138805f-e817-47bf-9f95-8c805b74306d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from pysilsub import observers\n",
    "\n",
    "from luxpy import indvcmf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6adce581-fda3-49c8-b6c9-90c9aca0f53f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mSignature:\u001b[0m\n",
       "\u001b[0mindvcmf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_cmfs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mfieldsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mwl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mvar_od_lens\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mvar_od_macula\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mvar_shft_LMS\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mvar_od_LMS\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mnorm_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'lms'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mbase\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mstrategy_2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0modata0\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mlms_to_xyz_method\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mallow_negative_values\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mnormalize_lms_to_xyz_matrix\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m\n",
       "Generate Individual Observer CMFs (cone fundamentals) \n",
       "based on CIE2006 cone fundamentals and published literature \n",
       "on observer variability in color matching and in physiological parameters.\n",
       "    \n",
       "Args:\n",
       "    :age: \n",
       "        | 32 or float or int, optional\n",
       "        | Observer age\n",
       "    :fieldsize:\n",
       "        | 10, optional\n",
       "        | Field size of stimulus in degrees (between 2° and 10°).\n",
       "    :wl: \n",
       "        | None, optional\n",
       "        | Interpolation/extraplation of :LMS: output to specified wavelengths.\n",
       "        | None: output original _WL\n",
       "    :var_od_lens:\n",
       "        | 0, optional\n",
       "        | Variation of optical density of lens.\n",
       "    :var_od_macula:\n",
       "        | 0, optional\n",
       "        | Variation of optical density of macula.\n",
       "    :var_shft_LMS:\n",
       "        | [0, 0, 0] optional\n",
       "        | Variation (shift) of LMS peak absorptance.\n",
       "    :var_od_LMS:\n",
       "        | [0, 0, 0] optional\n",
       "        | Variation of LMS optical densities.\n",
       "    :norm_type:\n",
       "        | None, optional\n",
       "        | - 'max': normalize LMSq functions to max = 1\n",
       "        | - 'area': normalize to area\n",
       "        | - 'power': normalize to power\n",
       "    :out: \n",
       "        | 'lms' or 'xyz', optional\n",
       "        | Determines output.\n",
       "    :base:\n",
       "        | False, boolean, optional\n",
       "        | The returned energy-based LMS cone fundamentals given to the\n",
       "        | precision of 9 sign. figs. if 'True', and to the precision of\n",
       "        | 6 sign. figs. if 'False'.\n",
       "    :strategy_2: \n",
       "        | True, bool, optional\n",
       "        | Use strategy 2 in github.com/ifarup/ciefunctions issue #121 for \n",
       "        | computing the weighting factor. If false, strategy 3 is applied.\n",
       "    :odata0: \n",
       "        | None, optional\n",
       "        | Dict with uncorrected ocular media and macula density functions and LMS absorptance functions\n",
       "        | None defaults to the ones stored in _DATA\n",
       "    :lms_to_xyz_method:\n",
       "        | None, optional\n",
       "        | Method to use to determine lms-to-xyz conversion matrix (options: 'asano', 'cietc197')\n",
       "    :allow_negative_values:\n",
       "        | False, optional\n",
       "        | Cone fundamentals or color matching functions should not have negative values.\n",
       "        |     If False: X[X<0] = 0.\n",
       "    :normalize_lms_to_xyz_matrix:\n",
       "        | False, optional\n",
       "        | Normalize that EEW is always at [100,100,100] in XYZ and LMS system.\n",
       "        \n",
       "Returns:\n",
       "    :returns: \n",
       "        | - 'LMS' [or 'XYZ']: ndarray with individual observer equal area-normalized \n",
       "        |           cone fundamentals. Wavelength have been added.\n",
       "        |    \n",
       "        | [- 'M': lms to xyz conversion matrix\n",
       "        |  -  'trans_lens': ndarray with lens transmission \n",
       "        |      (no interpolation)\n",
       "        |  - 'trans_macula': ndarray with macula transmission \n",
       "        |      (no interpolation)\n",
       "        |  - 'sens_photopig' : ndarray with photopigment sens. \n",
       "        |      (no interpolation)]\n",
       "        \n",
       "References:\n",
       "     1. `Asano Y, Fairchild MD, and Blondé L, (2016), \n",
       "     Individual Colorimetric Observer Model. \n",
       "     PLoS One 11, 1–19. \n",
       "     <http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0145671>`_\n",
       "    \n",
       "     2. `Asano Y, Fairchild MD, Blondé L, and Morvan P (2016). \n",
       "     Color matching experiment for highlighting interobserver variability. \n",
       "     Color Res. Appl. 41, 530–539. \n",
       "     <https://onlinelibrary.wiley.com/doi/abs/10.1002/col.21975>`_\n",
       "     \n",
       "     3. `CIE, TC1-36, (2006). \n",
       "     Fundamental Chromaticity Diagram with Physiological Axes - Part I \n",
       "     (Vienna: CIE). \n",
       "     <http://www.cie.co.at/publications/fundamental-chromaticity-diagram-physiological-axes-part-1>`_ \n",
       "     \n",
       "     4. `Asano's Individual Colorimetric Observer Model \n",
       "     <https://www.rit.edu/cos/colorscience/re_AsanoObserverFunctions.php>`_\n",
       "     \n",
       "     5. `CIE TC1-97 Python code for cone fundamentals and XYZ cmf calculations \n",
       "     (by Ivar Farup and Jan Henrik Wold, (c) 2012-2017) \n",
       "     <http://github.com/ifarup/ciefunctions>`_\n",
       "\u001b[0;31mSource:\u001b[0m   \n",
       "\u001b[0;32mdef\u001b[0m \u001b[0mcompute_cmfs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfieldsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                 \u001b[0mvar_od_lens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_od_macula\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                 \u001b[0mvar_shft_LMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_od_LMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                 \u001b[0mnorm_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'lms'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                 \u001b[0mstrategy_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0modata0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                 \u001b[0mlms_to_xyz_method\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_negative_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                 \u001b[0mnormalize_lms_to_xyz_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\"\"\"\u001b[0m\n",
       "\u001b[0;34m    Generate Individual Observer CMFs (cone fundamentals) \u001b[0m\n",
       "\u001b[0;34m    based on CIE2006 cone fundamentals and published literature \u001b[0m\n",
       "\u001b[0;34m    on observer variability in color matching and in physiological parameters.\u001b[0m\n",
       "\u001b[0;34m        \u001b[0m\n",
       "\u001b[0;34m    Args:\u001b[0m\n",
       "\u001b[0;34m        :age: \u001b[0m\n",
       "\u001b[0;34m            | 32 or float or int, optional\u001b[0m\n",
       "\u001b[0;34m            | Observer age\u001b[0m\n",
       "\u001b[0;34m        :fieldsize:\u001b[0m\n",
       "\u001b[0;34m            | 10, optional\u001b[0m\n",
       "\u001b[0;34m            | Field size of stimulus in degrees (between 2° and 10°).\u001b[0m\n",
       "\u001b[0;34m        :wl: \u001b[0m\n",
       "\u001b[0;34m            | None, optional\u001b[0m\n",
       "\u001b[0;34m            | Interpolation/extraplation of :LMS: output to specified wavelengths.\u001b[0m\n",
       "\u001b[0;34m            | None: output original _WL\u001b[0m\n",
       "\u001b[0;34m        :var_od_lens:\u001b[0m\n",
       "\u001b[0;34m            | 0, optional\u001b[0m\n",
       "\u001b[0;34m            | Variation of optical density of lens.\u001b[0m\n",
       "\u001b[0;34m        :var_od_macula:\u001b[0m\n",
       "\u001b[0;34m            | 0, optional\u001b[0m\n",
       "\u001b[0;34m            | Variation of optical density of macula.\u001b[0m\n",
       "\u001b[0;34m        :var_shft_LMS:\u001b[0m\n",
       "\u001b[0;34m            | [0, 0, 0] optional\u001b[0m\n",
       "\u001b[0;34m            | Variation (shift) of LMS peak absorptance.\u001b[0m\n",
       "\u001b[0;34m        :var_od_LMS:\u001b[0m\n",
       "\u001b[0;34m            | [0, 0, 0] optional\u001b[0m\n",
       "\u001b[0;34m            | Variation of LMS optical densities.\u001b[0m\n",
       "\u001b[0;34m        :norm_type:\u001b[0m\n",
       "\u001b[0;34m            | None, optional\u001b[0m\n",
       "\u001b[0;34m            | - 'max': normalize LMSq functions to max = 1\u001b[0m\n",
       "\u001b[0;34m            | - 'area': normalize to area\u001b[0m\n",
       "\u001b[0;34m            | - 'power': normalize to power\u001b[0m\n",
       "\u001b[0;34m        :out: \u001b[0m\n",
       "\u001b[0;34m            | 'lms' or 'xyz', optional\u001b[0m\n",
       "\u001b[0;34m            | Determines output.\u001b[0m\n",
       "\u001b[0;34m        :base:\u001b[0m\n",
       "\u001b[0;34m            | False, boolean, optional\u001b[0m\n",
       "\u001b[0;34m            | The returned energy-based LMS cone fundamentals given to the\u001b[0m\n",
       "\u001b[0;34m            | precision of 9 sign. figs. if 'True', and to the precision of\u001b[0m\n",
       "\u001b[0;34m            | 6 sign. figs. if 'False'.\u001b[0m\n",
       "\u001b[0;34m        :strategy_2: \u001b[0m\n",
       "\u001b[0;34m            | True, bool, optional\u001b[0m\n",
       "\u001b[0;34m            | Use strategy 2 in github.com/ifarup/ciefunctions issue #121 for \u001b[0m\n",
       "\u001b[0;34m            | computing the weighting factor. If false, strategy 3 is applied.\u001b[0m\n",
       "\u001b[0;34m        :odata0: \u001b[0m\n",
       "\u001b[0;34m            | None, optional\u001b[0m\n",
       "\u001b[0;34m            | Dict with uncorrected ocular media and macula density functions and LMS absorptance functions\u001b[0m\n",
       "\u001b[0;34m            | None defaults to the ones stored in _DATA\u001b[0m\n",
       "\u001b[0;34m        :lms_to_xyz_method:\u001b[0m\n",
       "\u001b[0;34m            | None, optional\u001b[0m\n",
       "\u001b[0;34m            | Method to use to determine lms-to-xyz conversion matrix (options: 'asano', 'cietc197')\u001b[0m\n",
       "\u001b[0;34m        :allow_negative_values:\u001b[0m\n",
       "\u001b[0;34m            | False, optional\u001b[0m\n",
       "\u001b[0;34m            | Cone fundamentals or color matching functions should not have negative values.\u001b[0m\n",
       "\u001b[0;34m            |     If False: X[X<0] = 0.\u001b[0m\n",
       "\u001b[0;34m        :normalize_lms_to_xyz_matrix:\u001b[0m\n",
       "\u001b[0;34m            | False, optional\u001b[0m\n",
       "\u001b[0;34m            | Normalize that EEW is always at [100,100,100] in XYZ and LMS system.\u001b[0m\n",
       "\u001b[0;34m            \u001b[0m\n",
       "\u001b[0;34m    Returns:\u001b[0m\n",
       "\u001b[0;34m        :returns: \u001b[0m\n",
       "\u001b[0;34m            | - 'LMS' [or 'XYZ']: ndarray with individual observer equal area-normalized \u001b[0m\n",
       "\u001b[0;34m            |           cone fundamentals. Wavelength have been added.\u001b[0m\n",
       "\u001b[0;34m            |    \u001b[0m\n",
       "\u001b[0;34m            | [- 'M': lms to xyz conversion matrix\u001b[0m\n",
       "\u001b[0;34m            |  -  'trans_lens': ndarray with lens transmission \u001b[0m\n",
       "\u001b[0;34m            |      (no interpolation)\u001b[0m\n",
       "\u001b[0;34m            |  - 'trans_macula': ndarray with macula transmission \u001b[0m\n",
       "\u001b[0;34m            |      (no interpolation)\u001b[0m\n",
       "\u001b[0;34m            |  - 'sens_photopig' : ndarray with photopigment sens. \u001b[0m\n",
       "\u001b[0;34m            |      (no interpolation)]\u001b[0m\n",
       "\u001b[0;34m            \u001b[0m\n",
       "\u001b[0;34m    References:\u001b[0m\n",
       "\u001b[0;34m         1. `Asano Y, Fairchild MD, and Blondé L, (2016), \u001b[0m\n",
       "\u001b[0;34m         Individual Colorimetric Observer Model. \u001b[0m\n",
       "\u001b[0;34m         PLoS One 11, 1–19. \u001b[0m\n",
       "\u001b[0;34m         <http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0145671>`_\u001b[0m\n",
       "\u001b[0;34m        \u001b[0m\n",
       "\u001b[0;34m         2. `Asano Y, Fairchild MD, Blondé L, and Morvan P (2016). \u001b[0m\n",
       "\u001b[0;34m         Color matching experiment for highlighting interobserver variability. \u001b[0m\n",
       "\u001b[0;34m         Color Res. Appl. 41, 530–539. \u001b[0m\n",
       "\u001b[0;34m         <https://onlinelibrary.wiley.com/doi/abs/10.1002/col.21975>`_\u001b[0m\n",
       "\u001b[0;34m         \u001b[0m\n",
       "\u001b[0;34m         3. `CIE, TC1-36, (2006). \u001b[0m\n",
       "\u001b[0;34m         Fundamental Chromaticity Diagram with Physiological Axes - Part I \u001b[0m\n",
       "\u001b[0;34m         (Vienna: CIE). \u001b[0m\n",
       "\u001b[0;34m         <http://www.cie.co.at/publications/fundamental-chromaticity-diagram-physiological-axes-part-1>`_ \u001b[0m\n",
       "\u001b[0;34m         \u001b[0m\n",
       "\u001b[0;34m         4. `Asano's Individual Colorimetric Observer Model \u001b[0m\n",
       "\u001b[0;34m         <https://www.rit.edu/cos/colorscience/re_AsanoObserverFunctions.php>`_\u001b[0m\n",
       "\u001b[0;34m         \u001b[0m\n",
       "\u001b[0;34m         5. `CIE TC1-97 Python code for cone fundamentals and XYZ cmf calculations \u001b[0m\n",
       "\u001b[0;34m         (by Ivar Farup and Jan Henrik Wold, (c) 2012-2017) \u001b[0m\n",
       "\u001b[0;34m         <http://github.com/ifarup/ciefunctions>`_\u001b[0m\n",
       "\u001b[0;34m    \"\"\"\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# TC1-97 ciefunctions rounds fieldsize:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mfieldsize_tmp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfieldsize\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfieldsize_tmp\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfieldsize_tmp\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mfieldsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfieldsize_tmp\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0modata0\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0modata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_DATA\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'odata'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0modata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0modata0\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mwl\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mwl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0modata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'wls'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mwl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetwlr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mlms_to_xyz_method\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mlms_to_xyz_method\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_LMS_TO_XYZ_METHOD\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mout_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# =======================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# Create initial data arrays\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# =======================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# '_base' : 9 sign. figs.\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# '_std'  : standard number of sign. figs./decimal places\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# '_all'  : values given at 0.1 nm steps from 390 nm to 830 nm\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# '_main' : values given at 1 nm steps from 390 nm to 830 nm\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# '_spec' : values given at specified wavelengths\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# wavelength arrays:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mwl_all\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0modata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'wls'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;31m#my_round(np.arange(390., 830. + .01, .1), 1)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mwl_spec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwl\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# LMS-base values (9 sign.figs.) at 0.1 nm steps from 390 nm to 830 nm;\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# wavelengths in first row.\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mLMS_base_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLMSq_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLMSa_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLMSe_o_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrmd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdocul\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_LMS_energy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfieldsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfieldsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                      \u001b[0mvar_od_lens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvar_od_lens\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_od_mac\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvar_od_macula\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                      \u001b[0mvar_shft_LMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvar_shft_LMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_od_LMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvar_od_LMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                      \u001b[0mnorm_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'max'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'LMSe,LMSq,alpha_lms,LMSe_o_max,rmd,docul'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                      \u001b[0mbase\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0modata0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0modata\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# note: base only applies to LMSe !\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# Do sompe checks to save on calculation time (don't calculate anything not needed.):\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mwl_equal_to_all\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray_equal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_round\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl_spec\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmy_round\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS_base_all\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mwl_equal_to_all\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'xyz'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'XYZ'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlms_to_xyz_method\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'cietc197'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# =======================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# Create LMS spline functions\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# =======================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# base:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;34m(\u001b[0m\u001b[0mwl_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL_base_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM_base_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mS_base_all\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMS_base_all\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mL_base_spline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterpolate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInterpolatedUnivariateSpline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL_base_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mM_base_spline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterpolate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInterpolatedUnivariateSpline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM_base_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mS_base_spline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterpolate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInterpolatedUnivariateSpline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mS_base_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# =======================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# Compute the LMS-base cone fundamentals \u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# =======================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mwl_equal_to_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# - LMS-base values (9 sign. figs) for specified wavelengths;\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m#   wavelengths in first row.\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mLMS_base_spec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_compute_LMS\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl_spec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL_base_spline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM_base_spline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mS_base_spline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mLMS_base_spec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS_base_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mLMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMS_base_spec\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mLMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS_base_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m  \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# =========================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# Compute the cone-fundamental-based XYZ tristimulus functions\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# =========================================================================\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'xyz'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'XYZ'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0mlms_to_xyz_method\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'asano'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mXYZ\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlmsb_to_xyzb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfieldsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'xyz,M'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_negative_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mallow_negative_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32melif\u001b[0m \u001b[0mlms_to_xyz_method\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'cietc197'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# Vλ and weighting factors of the L and M cone fundamentals:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# - Cone-fundamental-based V(λ) values (7 sign. figs.) at 0.1 nm steps\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m#   from 390 nm to 830 nm; wavelengths in first column\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# - Weights of L and M cone fundamentals in V(λ) synthesis\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# Re-use already calculated LMSe, LMSq, ...\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;34m(\u001b[0m\u001b[0mV_std_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLM_weights\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_Vl_energy_and_LM_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfieldsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfieldsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                  \u001b[0mstrategy_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstrategy_2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                  \u001b[0mLMSa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMSa_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLMSq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMSq_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                  \u001b[0mLMSe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMS_base_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLMSe_o_max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMSe_o_max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                  \u001b[0modata0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0modata0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# Create spline function for Vlambda:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mwl_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mV_std_all\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mV_std_all\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mV_std_spline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterpolate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInterpolatedUnivariateSpline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwl_all\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mV_std_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m#  Determine reference diagram\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mxyz_reference\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_xyz_interpolated_reference_system\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfieldsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_CMF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'1931_2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_CMF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'1964_10'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# - Non-renormalised tranformation matrix (8 decimal placed)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# - Non-renormalised CIE cone-fundamental-based XYZ tristimulus\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m#   values (7 sign. figs) for specified wavelengths; wavelengths in first row.\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;31m# - Ditto renormalized\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;34m(\u001b[0m\u001b[0mtrans_mat_std\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXYZ_std_spec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrans_mat_std_N\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXYZ_std_spec_N\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_compute_XYZ\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL_base_spline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mM_base_spline\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mS_base_spline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mV_std_spline\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mLMS_base_spec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mLMS_base_all\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mLM_weights\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m                                                                                         \u001b[0mxyz_reference\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;31m#            M = trans_mat_std, # unnormalized xyzbar! (when specified wavelenght range = [390,830,1] then XYZ_spec == XYZ_spec_N!!)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;31m#            XYZ = XYZ_std_spec\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mM\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrans_mat_std_N\u001b[0m \u001b[0;31m# re-normalized xyzbar! (for specified wavelenght range)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mXYZ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXYZ_std_spec_N\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# Output extra:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m'trans_lens'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mtrans_lens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdocul\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mtrans_lens\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mdocul\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m'trans_macula'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mtrans_macula\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrmd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mtrans_macula\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mrmd\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m'sens_photopig'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0msens_photopig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMSa_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0msens_photopig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLMSa_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mLMSa_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# Change normalization of M to \u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;31m# ensure that EEW is always at [100,100,100] in XYZ system:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnormalize_lms_to_xyz_matrix\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mMi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# M: lms->xyz; Mi: xyz->lms\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mMin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_3x3_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxyz0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# normalize Mi matrix\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mM\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMin\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# calculate new lms->xyz normalized matrix\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0mLMS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMin\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mXYZ\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# calculate lmsbar such that they match M!\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'xyz'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'lms'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# Change normalization of LMS, XYZ:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0mnorm_type\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mLMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspd_normalize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mXYZ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspd_normalize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXYZ\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'xyz'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mLMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXYZ\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'xyz'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'LMS'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'XYZ'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'LMS'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'lms'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'lms'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'LMS'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;31m# Change normalization of LMS:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0mnorm_type\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mLMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspd_normalize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mbase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'lms'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m            \u001b[0mLMS\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msign_figs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# only LMS. XYZ is output at 7 sign. digit level in tc197 Python code\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'LMS'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'lms'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mLMS\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'XYZ'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'xyz'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mXYZ\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'LMS,M'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'lms,M'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'XYZ,M'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'xyz,M'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mXYZ\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'LMS,XYZ,M'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'lms,xyz,M'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXYZ\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'M'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'LMS,trans_lens,trans_macula,sens_photopig'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrans_lens\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrans_macula\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msens_photopig\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'LMS,trans_lens,trans_macula,sens_photopig,LMSa'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0mLMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrans_lens\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrans_macula\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msens_photopig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0modata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'LMSa'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m        \u001b[0;32mreturn\u001b[0m \u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mFile:\u001b[0m      ~/opt/anaconda3/envs/pysilsub/lib/python3.10/site-packages/luxpy/toolboxes/indvcmf/individual_observer_cmf_model.py\n",
       "\u001b[0;31mType:\u001b[0m      function\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "indvcmf.compute_cmfs??"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bef57ba7-d262-45bd-b977-6367fef69f67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Wavelength (nm)', ylabel='Spectral sensitivity'>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "observer = observers.ColorimetricObserver(50, 3)\n",
    "cmfs = indvcmf.compute_cmfs(age=50, fieldsize=3)\n",
    "plt.plot(cmfs[0], cmfs[1:].T)\n",
    "observer.plot_action_spectra(ls=':')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1aa4e6a1-c7ee-410d-9b37-32c60bcc3947",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
