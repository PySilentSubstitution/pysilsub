{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7f339a75-6ee9-4230-91d6-54d89841a051",
   "metadata": {},
   "source": [
    "Silent substitution problems\n",
    "============================\n",
    "\n",
    "Silent substitution stimuli typically take the form of pulses or temporal modulations of photoreceptor-specific contrast presented against a background spectrum to which an observer has adapted. The background spectrum serves to maintain a set pattern of photoreceptor activations and the modulation spectrum increases activation of the targeted photoreceptor(s) without altering activation of the others. \n",
    "\n",
    "![](../../img/ss_example.svg)\n",
    "\n",
    "The example above describes, for a 5-primary stimulation device, a pair of silent substitution spectra where melanopsin receives 250% modulation and the cones are silent. From left to right are shown the spectral power distributions, chromaticity coordinates, and photoreceptor-specific irradiances for the background and modulation spectra. Rods appear to be modulated, too, but in this example both spectra are ~1800 lux, so we expect rods to be saturated and reason that it is safe to ignore them. We can see also that both spectra have the same chromaticity. \n",
    "\n",
    "Arriving at a solution such as this requires groundwork. First, we need a [forward model of our stimulation device](03a_stimulation_devices.ipynb) that will predict the spectral output for any combination of settings. With that in place, we review the research goals: What photoreceptor(s) are we trying to isolate? How much contrast do we want to achieve? Do we wish to enforce any particular constraints on our stimuli? When we know the answer to these questions, we can formalise the problem and look for a solution. Two ways of doing this, each of which has unique advantages, are with numerical optimization and linear algebra.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fccddf25-eb45-45fa-bd90-b1fef772c02d",
   "metadata": {},
   "source": [
    "`pysilsub.problems.SilentSubstitutionProblem`\n",
    "---------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b676a6f0-5b67-4292-b5b3-9bba558ce4f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pysilsub.problems import SilentSubstitutionProblem as SSP\n",
    "\n",
    "ssp = SSP(\n",
    "    calibration='../../data/S2_corrected_oo_spectra.csv',\n",
    "    wavelengths=[380, 781, 1],\n",
    "    resolutions=[4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, ],\n",
    "    colors=['blueviolet', 'royalblue', 'darkblue', 'blue', 'cyan', 'green', 'lime', 'orange', 'red', 'darkred'],\n",
    "    name='SpectraTuneLab'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1490d833-2efc-429b-abbe-31045752f064",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pysilsub.problems.SilentSubstitutionProblem at 0x7fd678ba5810>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "abd05bd9-ed24-42ca-b128-7d41ecce8e28",
   "metadata": {},
   "source": [
    "Defining a problem\n",
    "------------------\n",
    "\n",
    "Problems are defined by setting"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "845f235c-a7d2-4068-b392-a88786f315d6",
   "metadata": {},
   "source": [
    "Numerical optimization\n",
    "----------------------\n",
    "\n",
    "Silent substitution can be approached as a [constrained numerical optimization](https://en.wikipedia.org/wiki/Constrained_optimization) problem of the form:\n",
    "\n",
    "\\begin{equation}\n",
    "\\begin{array}{rrclcl}\n",
    "& \\underset{x \\in \\mathbb{R}^{n}}{\\text{minimize}}\n",
    "&  f(x) \\\\\n",
    "& \\text{subject to}\n",
    "& g^{L} \\le g(x) \\le g^{U} \\\\\n",
    "& & x^{L} \\le x \\le x^{U} ,\n",
    "\\end{array}\n",
    "\\end{equation}\n",
    "\n",
    "where $x \\in \\mathbb{R}^{n}$ are the optimization variables (the device settings) whose lower and upper bounds, $x^{L}$ and $x^{U}$, are between 0 and 1 to ensure that the solution is within the gamut of the device, $f(x)$ is the objective function that aims to maximise contrast of the target photoreceptor(s), and $g(x)$ is a function that calculates contrast for the silenced photoreceptor(s), where $g^{L}$ and $g^{U}$ should be zero. In all cases, $x$ is a vector containing the weights for the LED settings. \n",
    "\n",
    "Conveniently, *PySilSub* encapsulates this optimisation problem in a `SilentSubstitutionProblem` class that inherits everything from `StimulationDevice`. We can instantiate it in the same way, but this time including further information to condition the problem. As a basic demonstration, suppose we have calibration data for a linear, 8-bit, 5-primary stimulation system and that we want to find the settings for two spectra that will yield 250% contrast for melanopsin. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fe566a1-b4a8-4638-803b-3d6338f3bc85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wavelength</th>\n",
       "      <th>380</th>\n",
       "      <th>381</th>\n",
       "      <th>382</th>\n",
       "      <th>383</th>\n",
       "      <th>384</th>\n",
       "      <th>385</th>\n",
       "      <th>386</th>\n",
       "      <th>387</th>\n",
       "      <th>388</th>\n",
       "      <th>389</th>\n",
       "      <th>...</th>\n",
       "      <th>771</th>\n",
       "      <th>772</th>\n",
       "      <th>773</th>\n",
       "      <th>774</th>\n",
       "      <th>775</th>\n",
       "      <th>776</th>\n",
       "      <th>777</th>\n",
       "      <th>778</th>\n",
       "      <th>779</th>\n",
       "      <th>780</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Primary</th>\n",
       "      <th>Setting</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0</th>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.000068</td>\n",
       "      <td>0.000071</td>\n",
       "      <td>0.000062</td>\n",
       "      <td>0.000068</td>\n",
       "      <td>0.000055</td>\n",
       "      <td>0.000055</td>\n",
       "      <td>0.000064</td>\n",
       "      <td>0.000051</td>\n",
       "      <td>0.000063</td>\n",
       "      <td>0.000074</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000037</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000040</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000036</td>\n",
       "      <td>0.000032</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.000137</td>\n",
       "      <td>0.000141</td>\n",
       "      <td>0.000123</td>\n",
       "      <td>0.000136</td>\n",
       "      <td>0.000109</td>\n",
       "      <td>0.000111</td>\n",
       "      <td>0.000127</td>\n",
       "      <td>0.000101</td>\n",
       "      <td>0.000126</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000074</td>\n",
       "      <td>0.000077</td>\n",
       "      <td>0.000080</td>\n",
       "      <td>0.000079</td>\n",
       "      <td>0.000078</td>\n",
       "      <td>0.000078</td>\n",
       "      <td>0.000072</td>\n",
       "      <td>0.000064</td>\n",
       "      <td>0.000075</td>\n",
       "      <td>0.000075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.000205</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>0.000185</td>\n",
       "      <td>0.000204</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>0.000166</td>\n",
       "      <td>0.000191</td>\n",
       "      <td>0.000152</td>\n",
       "      <td>0.000189</td>\n",
       "      <td>0.000222</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000111</td>\n",
       "      <td>0.000116</td>\n",
       "      <td>0.000120</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>0.000117</td>\n",
       "      <td>0.000117</td>\n",
       "      <td>0.000108</td>\n",
       "      <td>0.000096</td>\n",
       "      <td>0.000113</td>\n",
       "      <td>0.000112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0.000274</td>\n",
       "      <td>0.000282</td>\n",
       "      <td>0.000247</td>\n",
       "      <td>0.000272</td>\n",
       "      <td>0.000219</td>\n",
       "      <td>0.000222</td>\n",
       "      <td>0.000254</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>0.000252</td>\n",
       "      <td>0.000296</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>0.000154</td>\n",
       "      <td>0.000160</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000157</td>\n",
       "      <td>0.000156</td>\n",
       "      <td>0.000144</td>\n",
       "      <td>0.000128</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">4</th>\n",
       "      <th>223</th>\n",
       "      <td>0.003027</td>\n",
       "      <td>0.003555</td>\n",
       "      <td>0.003159</td>\n",
       "      <td>0.003563</td>\n",
       "      <td>0.002712</td>\n",
       "      <td>0.002951</td>\n",
       "      <td>0.002827</td>\n",
       "      <td>0.002159</td>\n",
       "      <td>0.003197</td>\n",
       "      <td>0.003623</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001990</td>\n",
       "      <td>0.002227</td>\n",
       "      <td>0.002264</td>\n",
       "      <td>0.002182</td>\n",
       "      <td>0.002558</td>\n",
       "      <td>0.002361</td>\n",
       "      <td>0.002268</td>\n",
       "      <td>0.001905</td>\n",
       "      <td>0.002162</td>\n",
       "      <td>0.002360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>0.003135</td>\n",
       "      <td>0.003682</td>\n",
       "      <td>0.003271</td>\n",
       "      <td>0.003690</td>\n",
       "      <td>0.002808</td>\n",
       "      <td>0.003056</td>\n",
       "      <td>0.002928</td>\n",
       "      <td>0.002237</td>\n",
       "      <td>0.003311</td>\n",
       "      <td>0.003753</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002061</td>\n",
       "      <td>0.002306</td>\n",
       "      <td>0.002345</td>\n",
       "      <td>0.002259</td>\n",
       "      <td>0.002649</td>\n",
       "      <td>0.002446</td>\n",
       "      <td>0.002349</td>\n",
       "      <td>0.001973</td>\n",
       "      <td>0.002239</td>\n",
       "      <td>0.002445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>0.003243</td>\n",
       "      <td>0.003809</td>\n",
       "      <td>0.003384</td>\n",
       "      <td>0.003817</td>\n",
       "      <td>0.002905</td>\n",
       "      <td>0.003162</td>\n",
       "      <td>0.003029</td>\n",
       "      <td>0.002314</td>\n",
       "      <td>0.003426</td>\n",
       "      <td>0.003882</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002132</td>\n",
       "      <td>0.002386</td>\n",
       "      <td>0.002426</td>\n",
       "      <td>0.002337</td>\n",
       "      <td>0.002741</td>\n",
       "      <td>0.002530</td>\n",
       "      <td>0.002430</td>\n",
       "      <td>0.002041</td>\n",
       "      <td>0.002316</td>\n",
       "      <td>0.002529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>0.003351</td>\n",
       "      <td>0.003936</td>\n",
       "      <td>0.003497</td>\n",
       "      <td>0.003944</td>\n",
       "      <td>0.003002</td>\n",
       "      <td>0.003267</td>\n",
       "      <td>0.003130</td>\n",
       "      <td>0.002391</td>\n",
       "      <td>0.003540</td>\n",
       "      <td>0.004011</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002203</td>\n",
       "      <td>0.002465</td>\n",
       "      <td>0.002507</td>\n",
       "      <td>0.002415</td>\n",
       "      <td>0.002832</td>\n",
       "      <td>0.002614</td>\n",
       "      <td>0.002511</td>\n",
       "      <td>0.002109</td>\n",
       "      <td>0.002394</td>\n",
       "      <td>0.002613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>0.003459</td>\n",
       "      <td>0.004063</td>\n",
       "      <td>0.003610</td>\n",
       "      <td>0.004071</td>\n",
       "      <td>0.003099</td>\n",
       "      <td>0.003373</td>\n",
       "      <td>0.003231</td>\n",
       "      <td>0.002468</td>\n",
       "      <td>0.003654</td>\n",
       "      <td>0.004141</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>0.002545</td>\n",
       "      <td>0.002587</td>\n",
       "      <td>0.002493</td>\n",
       "      <td>0.002923</td>\n",
       "      <td>0.002699</td>\n",
       "      <td>0.002592</td>\n",
       "      <td>0.002177</td>\n",
       "      <td>0.002471</td>\n",
       "      <td>0.002698</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>165 rows × 401 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Wavelength            380       381       382       383       384       385  \\\n",
       "Primary Setting                                                               \n",
       "0       0        0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "        7        0.000068  0.000071  0.000062  0.000068  0.000055  0.000055   \n",
       "        15       0.000137  0.000141  0.000123  0.000136  0.000109  0.000111   \n",
       "        23       0.000205  0.000212  0.000185  0.000204  0.000164  0.000166   \n",
       "        31       0.000274  0.000282  0.000247  0.000272  0.000219  0.000222   \n",
       "...                   ...       ...       ...       ...       ...       ...   \n",
       "4       223      0.003027  0.003555  0.003159  0.003563  0.002712  0.002951   \n",
       "        231      0.003135  0.003682  0.003271  0.003690  0.002808  0.003056   \n",
       "        239      0.003243  0.003809  0.003384  0.003817  0.002905  0.003162   \n",
       "        247      0.003351  0.003936  0.003497  0.003944  0.003002  0.003267   \n",
       "        255      0.003459  0.004063  0.003610  0.004071  0.003099  0.003373   \n",
       "\n",
       "Wavelength            386       387       388       389  ...       771  \\\n",
       "Primary Setting                                          ...             \n",
       "0       0        0.000000  0.000000  0.000000  0.000000  ...  0.000000   \n",
       "        7        0.000064  0.000051  0.000063  0.000074  ...  0.000037   \n",
       "        15       0.000127  0.000101  0.000126  0.000148  ...  0.000074   \n",
       "        23       0.000191  0.000152  0.000189  0.000222  ...  0.000111   \n",
       "        31       0.000254  0.000202  0.000252  0.000296  ...  0.000148   \n",
       "...                   ...       ...       ...       ...  ...       ...   \n",
       "4       223      0.002827  0.002159  0.003197  0.003623  ...  0.001990   \n",
       "        231      0.002928  0.002237  0.003311  0.003753  ...  0.002061   \n",
       "        239      0.003029  0.002314  0.003426  0.003882  ...  0.002132   \n",
       "        247      0.003130  0.002391  0.003540  0.004011  ...  0.002203   \n",
       "        255      0.003231  0.002468  0.003654  0.004141  ...  0.002274   \n",
       "\n",
       "Wavelength            772       773       774       775       776       777  \\\n",
       "Primary Setting                                                               \n",
       "0       0        0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "        7        0.000039  0.000040  0.000039  0.000039  0.000039  0.000036   \n",
       "        15       0.000077  0.000080  0.000079  0.000078  0.000078  0.000072   \n",
       "        23       0.000116  0.000120  0.000118  0.000117  0.000117  0.000108   \n",
       "        31       0.000154  0.000160  0.000158  0.000157  0.000156  0.000144   \n",
       "...                   ...       ...       ...       ...       ...       ...   \n",
       "4       223      0.002227  0.002264  0.002182  0.002558  0.002361  0.002268   \n",
       "        231      0.002306  0.002345  0.002259  0.002649  0.002446  0.002349   \n",
       "        239      0.002386  0.002426  0.002337  0.002741  0.002530  0.002430   \n",
       "        247      0.002465  0.002507  0.002415  0.002832  0.002614  0.002511   \n",
       "        255      0.002545  0.002587  0.002493  0.002923  0.002699  0.002592   \n",
       "\n",
       "Wavelength            778       779       780  \n",
       "Primary Setting                                \n",
       "0       0        0.000000  0.000000  0.000000  \n",
       "        7        0.000032  0.000038  0.000037  \n",
       "        15       0.000064  0.000075  0.000075  \n",
       "        23       0.000096  0.000113  0.000112  \n",
       "        31       0.000128  0.000151  0.000149  \n",
       "...                   ...       ...       ...  \n",
       "4       223      0.001905  0.002162  0.002360  \n",
       "        231      0.001973  0.002239  0.002445  \n",
       "        239      0.002041  0.002316  0.002529  \n",
       "        247      0.002109  0.002394  0.002613  \n",
       "        255      0.002177  0.002471  0.002698  \n",
       "\n",
       "[165 rows x 401 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from pysilsub.problem import SilentSubstitutionProblem\n",
    "\n",
    "# Load the calibration data\n",
    "spds = pd.read_csv(\n",
    "    '../../data/BCGAR_5_Primary_8_bit_linear.csv', \n",
    "    index_col=['Primary','Setting'])\n",
    "spds.columns = pd.Int64Index(spds.columns.astype(int))\n",
    "spds.columns.name = 'Wavelength'\n",
    "\n",
    "# List of colors for the primaries\n",
    "colors = ['blue', 'cyan', 'green', 'orange', 'red'] \n",
    "\n",
    "spds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc659f72-ee3e-45fd-958c-5b3c8943c26a",
   "metadata": {},
   "source": [
    "We can pass these data to `SilentSubstitutionProblem`&mdash;just like we did with `StimulationDevice`&mdash;only this time we specify which photoreceptors to ignore, which of them to silence, and which to isolate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9ed1e03f-d8fd-4162-b222-c1674a8f6adc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pysilsub.problem import SilentSubstitutionProblem as SSP\n",
    "\n",
    "ssp = SSP(\n",
    "    resolutions=[255]*5,  # Five 8-bit primaries\n",
    "    colors=colors,  # Colors of the LEDs\n",
    "    spds=spds,  # The calibration data\n",
    "    spd_binwidth=1,  # SPD wavelength binwidth\n",
    "    ignore=['R'],  # Ignore rods\n",
    "    silence=['S', 'M', 'L'],  # Silence S-, M-, and L-cones\n",
    "    isolate=['I'],  # Isolate melanopsin\n",
    "    target_contrast=2.5,  # Aim for 250% contrast \n",
    "    name='BCGAR (8-bit, linear)'  # Description of device\n",
    ") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "626757e6-f0b7-400c-8565-13da44fe931f",
   "metadata": {},
   "source": [
    "Because `StimulationDevice` is the base class we can do all the cool things described [here](03a_stimulation_devices.ipynb), like plotting the spds and the gamut of the device. But lets get straight on to the optimisation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5c9576c-c113-4cc8-8f72-6810fbdc8496",
   "metadata": {},
   "source": [
    "As a general note, numerical optimisation is a big old topic and there are many algorithms available, each with their own idiosynchrasies. At present, *PySilSub* does not know the best algorithm for your stimulation device and research goals, nor does it unite different algorithms under a common calling syntax. It simply encapsulates your problem in the form of ready made functions that you can pass to an optimiser. So, If you are new to optimisation in Python, it's worth investing a bit of time to learn the basics. [This article](https://realpython.com/python-scipy-cluster-optimize/) is a good place to start. \n",
    "\n",
    "Though not the only option, Scipy's `optimize` module is comprehensive and contains a range of methods for local and global optisation with linear or nonlinear constraints. In this case we will use the [SLSQP](https://docs.scipy.org/doc/scipy-1.8.0/html-scipyorg/reference/optimize.minimize-slsqp.html) solver with Scipy's `optimize.minimize` function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b57e7476-1f1b-4f5d-9d52-618bc181b43c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "     fun: 3.4687435975785355e-09\n",
       "     jac: array([ -5.75445672e-03,  -1.10053212e-02,  -8.89814623e-03,\n",
       "        -1.40415965e-03,  -2.18769410e-04,   1.89077494e-03,\n",
       "         3.18125650e-03,   2.24496426e-03,   4.59190153e-04,\n",
       "         5.46986117e-05])\n",
       " message: 'Optimization terminated successfully'\n",
       "    nfev: 701\n",
       "     nit: 60\n",
       "    njev: 60\n",
       "  status: 0\n",
       " success: True\n",
       "       x: array([  3.64725695e-02,   0.00000000e+00,   6.77943940e-05,\n",
       "         1.66243135e-01,   2.54857811e-04,   0.00000000e+00,\n",
       "         2.51008818e-02,   1.43483297e-01,   1.86159038e-02,\n",
       "         1.00000000e+00])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.optimize import minimize\n",
    "\n",
    "# Initial guess for optimisation variables\n",
    "x0 = ssp.initial_guess_x0()\n",
    "\n",
    "# The silencing constraint is an equality\n",
    "# constraint defined in the standard scipy \n",
    "# format. \n",
    "constraints = {\n",
    "    'type': 'eq',\n",
    "    'fun': ssp.silencing_constraint,\n",
    "    'ftol': 1e-07\n",
    "    }\n",
    "\n",
    "# Perform the optimisation\n",
    "result = minimize(\n",
    "    fun=ssp.objective_function,\n",
    "    x0=x0,\n",
    "    method='SLSQP',\n",
    "    bounds=ssp.bounds,\n",
    "    constraints=constraints,\n",
    "    tol=1e-07\n",
    ")\n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8f2a0c3-b395-4ab0-9183-da362bd01537",
   "metadata": {},
   "source": [
    "Printed above is the result of the optimisation in Scipy's standard `OptimizationResult` format. The low value of `fun` indicates that we are very close to the target contrast of 250%. Unsurprisingly, what we actually need is `result.x`. Visualising the result is straight forward."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cbca902e-1289-4587-87ff-609e6d3625f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tBackground luminance: 1794.8826686914454\n",
      "\tModulation luminance: 1794.8835907203427\n",
      "\tBackground xy: [ 0.52748464  0.3747774 ]\n",
      "\tModulation xy: [ 0.52741232  0.37482878]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "result_fig = ssp.plot_ss_result(result.x)\n",
    "result_fig.savefig('../../img/ss_example.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "027c2e7a-4be3-4ecf-b951-fb81bf8c6cd3",
   "metadata": {},
   "source": [
    "Voila&mdash;a pair of silent substitution spectra. Converting the optimisation result to 8-bit settings for the stimulation device is easy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac1f364f-88a7-4636-b1c2-35376c28195d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[9, 0, 0, 42, 0]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bg_settings = ssp.weights_to_settings(result.x[:5])\n",
    "bg_settings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ad42a7cf-8bac-4caa-b21d-4907607a79f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 6, 36, 4, 255]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod_settings = ssp.weights_to_settings(result.x[5:])\n",
    "mod_settings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ae85e48-1675-4a71-9758-665004032842",
   "metadata": {},
   "source": [
    "All being well, if we pass these settings to the stimulation device it will produce these two spectra. But see here for various challanges and caveats. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a3894ea-0d04-47bb-8df0-3d588ba20cce",
   "metadata": {
    "tags": []
   },
   "source": [
    "Linear algebra\n",
    "--------------\n",
    "\n",
    "Silent substitution problems can also be solved with linear algebra. Continuing with our 5-primary example, suppose that we now want to isolate S-cones. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "681aebba-5b4c-4fc4-867d-b0e7cc0120d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "ssp.isolate = ['S']\n",
    "ssp.silence = ['M', 'L', 'I']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99e3d3f1-4fe3-4c4b-be37-2b19f35cc760",
   "metadata": {},
   "source": [
    "For a background spectrum we will take the mixture of all primaries at half-max power, $\\alpha_{bg} = [.5 \\ .5 \\ .5 \\ .5 \\ .5]$. Note that in this case we are not summing the predicted spectra as we'll be doing matrix algebra involving the individual primaries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5ccd54b8-4eb3-4082-aa5c-b47b3dc7cbb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Primary</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wavelength</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.001098</td>\n",
       "      <td>0.000856</td>\n",
       "      <td>0.001115</td>\n",
       "      <td>0.001842</td>\n",
       "      <td>0.001736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.001134</td>\n",
       "      <td>0.000933</td>\n",
       "      <td>0.001191</td>\n",
       "      <td>0.002067</td>\n",
       "      <td>0.002040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.000991</td>\n",
       "      <td>0.000838</td>\n",
       "      <td>0.001198</td>\n",
       "      <td>0.001945</td>\n",
       "      <td>0.001812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.001091</td>\n",
       "      <td>0.000828</td>\n",
       "      <td>0.001231</td>\n",
       "      <td>0.001945</td>\n",
       "      <td>0.002044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.000879</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>0.001003</td>\n",
       "      <td>0.001673</td>\n",
       "      <td>0.001556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>776</th>\n",
       "      <td>0.000625</td>\n",
       "      <td>0.000533</td>\n",
       "      <td>0.000710</td>\n",
       "      <td>0.002349</td>\n",
       "      <td>0.001355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>777</th>\n",
       "      <td>0.000577</td>\n",
       "      <td>0.000525</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>0.002305</td>\n",
       "      <td>0.001301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>778</th>\n",
       "      <td>0.000516</td>\n",
       "      <td>0.000398</td>\n",
       "      <td>0.000562</td>\n",
       "      <td>0.002146</td>\n",
       "      <td>0.001093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>779</th>\n",
       "      <td>0.000605</td>\n",
       "      <td>0.000539</td>\n",
       "      <td>0.000733</td>\n",
       "      <td>0.002114</td>\n",
       "      <td>0.001240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000559</td>\n",
       "      <td>0.000826</td>\n",
       "      <td>0.002350</td>\n",
       "      <td>0.001354</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>401 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Primary            0         1         2         3         4\n",
       "Wavelength                                                  \n",
       "380         0.001098  0.000856  0.001115  0.001842  0.001736\n",
       "381         0.001134  0.000933  0.001191  0.002067  0.002040\n",
       "382         0.000991  0.000838  0.001198  0.001945  0.001812\n",
       "383         0.001091  0.000828  0.001231  0.001945  0.002044\n",
       "384         0.000879  0.000745  0.001003  0.001673  0.001556\n",
       "...              ...       ...       ...       ...       ...\n",
       "776         0.000625  0.000533  0.000710  0.002349  0.001355\n",
       "777         0.000577  0.000525  0.000693  0.002305  0.001301\n",
       "778         0.000516  0.000398  0.000562  0.002146  0.001093\n",
       "779         0.000605  0.000539  0.000733  0.002114  0.001240\n",
       "780         0.000600  0.000559  0.000826  0.002350  0.001354\n",
       "\n",
       "[401 rows x 5 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abg = [.5, .5, .5, .5, .5]\n",
    "bg_spds = ssp.predict_multiprimary_spd(abg, nosum=True)\n",
    "bg_spds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98836ee6-108f-4aec-859a-0379554f00a5",
   "metadata": {},
   "source": [
    "Next, we'll be needing the spectral sensitivities for the photoreceptors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7bf73dae-8568-4ac5-b0f9-5ddbddf45200",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Photoreceptor</th>\n",
       "      <th>S</th>\n",
       "      <th>M</th>\n",
       "      <th>L</th>\n",
       "      <th>R</th>\n",
       "      <th>I</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wavelength</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.890000e-04</td>\n",
       "      <td>9.181600e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.650000e-04</td>\n",
       "      <td>1.045600e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.520000e-04</td>\n",
       "      <td>1.178600e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.540000e-04</td>\n",
       "      <td>1.322800e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.720000e-04</td>\n",
       "      <td>1.483800e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>776</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000024</td>\n",
       "      <td>1.730000e-07</td>\n",
       "      <td>2.550000e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>777</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>1.640000e-07</td>\n",
       "      <td>2.420000e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>778</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000021</td>\n",
       "      <td>1.550000e-07</td>\n",
       "      <td>2.290000e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>779</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000020</td>\n",
       "      <td>1.470000e-07</td>\n",
       "      <td>2.170000e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>1.390000e-07</td>\n",
       "      <td>2.050000e-08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>401 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Photoreceptor    S         M         L             R             I\n",
       "Wavelength                                                        \n",
       "380            0.0  0.000000  0.000000  5.890000e-04  9.181600e-04\n",
       "381            0.0  0.000000  0.000000  6.650000e-04  1.045600e-03\n",
       "382            0.0  0.000000  0.000000  7.520000e-04  1.178600e-03\n",
       "383            0.0  0.000000  0.000000  8.540000e-04  1.322800e-03\n",
       "384            0.0  0.000000  0.000000  9.720000e-04  1.483800e-03\n",
       "...            ...       ...       ...           ...           ...\n",
       "776            0.0  0.000002  0.000024  1.730000e-07  2.550000e-08\n",
       "777            0.0  0.000002  0.000023  1.640000e-07  2.420000e-08\n",
       "778            0.0  0.000002  0.000021  1.550000e-07  2.290000e-08\n",
       "779            0.0  0.000002  0.000020  1.470000e-07  2.170000e-08\n",
       "780            0.0  0.000001  0.000019  1.390000e-07  2.050000e-08\n",
       "\n",
       "[401 rows x 5 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pysilsub.CIE import get_CIES026\n",
    "\n",
    "sss = get_CIES026()\n",
    "sss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f691385f-4284-410a-8bca-ea6dcb124013",
   "metadata": {},
   "source": [
    "The dot product of these matrices, which we will call $A$, contains the *a*-opic irradiances for the primary components of the background spectrum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "27f6d1da-ea09-45fd-9087-256c9e7e8073",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Primary</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Photoreceptor</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>S</th>\n",
       "      <td>3.580009</td>\n",
       "      <td>2.453689</td>\n",
       "      <td>0.211358</td>\n",
       "      <td>0.095264</td>\n",
       "      <td>0.057067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>0.627573</td>\n",
       "      <td>1.355843</td>\n",
       "      <td>3.573256</td>\n",
       "      <td>4.683028</td>\n",
       "      <td>0.156777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L</th>\n",
       "      <td>0.435727</td>\n",
       "      <td>0.873636</td>\n",
       "      <td>2.915142</td>\n",
       "      <td>8.686473</td>\n",
       "      <td>0.853310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>R</th>\n",
       "      <td>1.730730</td>\n",
       "      <td>2.965132</td>\n",
       "      <td>3.638927</td>\n",
       "      <td>1.288265</td>\n",
       "      <td>0.076642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>I</th>\n",
       "      <td>2.094721</td>\n",
       "      <td>3.520715</td>\n",
       "      <td>2.841600</td>\n",
       "      <td>0.509312</td>\n",
       "      <td>0.069365</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Primary               0         1         2         3         4\n",
       "Photoreceptor                                                  \n",
       "S              3.580009  2.453689  0.211358  0.095264  0.057067\n",
       "M              0.627573  1.355843  3.573256  4.683028  0.156777\n",
       "L              0.435727  0.873636  2.915142  8.686473  0.853310\n",
       "R              1.730730  2.965132  3.638927  1.288265  0.076642\n",
       "I              2.094721  3.520715  2.841600  0.509312  0.069365"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sss.T.dot(bg_spds)\n",
    "A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "235f0693-800c-43e1-97a9-00e868d86dd2",
   "metadata": {},
   "source": [
    "Now, the unique scaling coefficients for the primaries $\\alpha_{sc} = [p_{0} \\ p_{1} \\ p_{2} \\ p_{3} \\ p_{4}]$ that must be added to the primary weights for the background $\\alpha_{bg}$ for a requested modulation $\\beta = [S \\ M \\ L \\ R \\ I]$ are discovered as $\\alpha_{sc} = \\beta A^{-1}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9f99761a-f2c8-48ed-a0e6-6c68397f2ae5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Photoreceptor</th>\n",
       "      <th>S</th>\n",
       "      <th>M</th>\n",
       "      <th>L</th>\n",
       "      <th>R</th>\n",
       "      <th>I</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Primary</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.473797</td>\n",
       "      <td>-0.159332</td>\n",
       "      <td>-0.001803</td>\n",
       "      <td>0.993080</td>\n",
       "      <td>-1.104764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.279487</td>\n",
       "      <td>0.340021</td>\n",
       "      <td>-0.037472</td>\n",
       "      <td>-1.654925</td>\n",
       "      <td>1.750941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.002424</td>\n",
       "      <td>-0.286409</td>\n",
       "      <td>0.015329</td>\n",
       "      <td>1.342032</td>\n",
       "      <td>-1.022070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.026572</td>\n",
       "      <td>0.502356</td>\n",
       "      <td>-0.059770</td>\n",
       "      <td>-0.855885</td>\n",
       "      <td>0.523675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.218010</td>\n",
       "      <td>-4.402157</td>\n",
       "      <td>1.767262</td>\n",
       "      <td>5.315177</td>\n",
       "      <td>-3.067724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Photoreceptor         S         M         L         R         I\n",
       "Primary                                                        \n",
       "0              0.473797 -0.159332 -0.001803  0.993080 -1.104764\n",
       "1             -0.279487  0.340021 -0.037472 -1.654925  1.750941\n",
       "2             -0.002424 -0.286409  0.015329  1.342032 -1.022070\n",
       "3              0.026572  0.502356 -0.059770 -0.855885  0.523675\n",
       "4             -0.218010 -4.402157  1.767262  5.315177 -3.067724"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Calculate inverse of A\n",
    "A1 = pd.DataFrame(\n",
    "    np.linalg.inv(A.values),\n",
    "    A.columns, \n",
    "    A.index)\n",
    "A1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d62e5f39-90d9-4094-97f8-ec2310db11ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Primary\n",
       "0    0.473797\n",
       "1   -0.279487\n",
       "2   -0.002424\n",
       "3    0.026572\n",
       "4   -0.218010\n",
       "dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Requested modulation for S-cones\n",
    "# S, M, L, R, I\n",
    "b = np.array([1., 0., 0., 0., 0.])\n",
    "\n",
    "# Calculate the scaling coefficients\n",
    "asc = A1.dot(b)\n",
    "asc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed9a0c1d-d3c8-4e97-b343-02874349fb8a",
   "metadata": {},
   "source": [
    "Following on from above, $\\alpha_{mod} = \\alpha_{bg} + \\alpha_{sc}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8f8c333a-9d43-4de1-b343-ec3b6f56c537",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9737967205732633,\n",
       " 0.2205128840696679,\n",
       " 0.497575760149633,\n",
       " 0.5265724940899263,\n",
       " 0.28198992315052973]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amod = (abg + asc).to_list()\n",
    "amod"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e6f3164-9747-4a28-aa64-b32c12850687",
   "metadata": {},
   "source": [
    "Obviously, these values need to be between zero and one for the solution to be valid, which in this case they are. As before, we can visualise the solution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "fc8b83e3-3f1d-43f6-9c71-153c1d786409",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tBackground luminance: 8996.204095646926\n",
      "\tModulation luminance: 8996.271148062795\n",
      "\tBackground xy: [ 0.36478141  0.31094694]\n",
      "\tModulation xy: [ 0.3434773   0.27744979]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "result_fig = ssp.plot_ss_result(abg + amod)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca4e1bd8-25da-4c7b-8a4a-045a5dac85f5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
