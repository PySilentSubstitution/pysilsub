{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7f339a75-6ee9-4230-91d6-54d89841a051",
   "metadata": {},
   "source": [
    "Making stimuli\n",
    "==============\n",
    "\n",
    "Silent substitution stimuli typically take the form of pulses or temporal modulations of photoreceptor-specific contrast presented against a background spectrum to which an observer has adapted. The background spectrum serves to maintain a set pattern of photoreceptor activations and the modulation spectrum increases activation of the targeted photoreceptor(s) without altering activation of the others. \n",
    "\n",
    "![](../../img/ss_example.svg)\n",
    "\n",
    "The example above describes, for a 5-primary stimulation device, a pair of silent substitution spectra where melanopsin receives 250% modulation and the cones are silent. From left to right are shown the spectral power distributions, chromaticity coordinates, and photoreceptor-specific irradiances for the background and modulation spectra. Rods appear to be modulated, too, but in this example both spectra are ~1500 lux, so we expect rods to be saturated and reason that it is safe to ignore them. We can see also that both spectra have the same chromaticity. \n",
    "\n",
    "Arriving at a solution such as this requires groundwork. First, we need a [forward model of our stimulation device](03a_stimulation_devices.ipynb) that will predict the spectral output for any combination of settings. With that in place, we review the research goals: What photoreceptor(s) are we trying to stimulate? How much contrast do we want to achieve? Do we wish to enforce any particular constraints on our stimuli? When we know the answer to these questions, we can formalise the problem and look for a solution. Two ways of doing this, each of which has unique advantages, are with numerical optimization and linear algebra.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "845f235c-a7d2-4068-b392-a88786f315d6",
   "metadata": {},
   "source": [
    "Numerical optimization\n",
    "----------------------\n",
    "\n",
    "Silent substitution can be approached as a [constrained numerical optimization](https://en.wikipedia.org/wiki/Constrained_optimization) problem of the form:\n",
    "\n",
    "\\begin{equation}\n",
    "\\begin{array}{rrclcl}\n",
    "& \\underset{x \\in \\mathbb{R}^{n}}{\\text{minimize}}\n",
    "&  f(x) \\\\\n",
    "& \\text{subject to}\n",
    "& g^{L} \\le g(x) \\le g^{U} \\\\\n",
    "& & x^{L} \\le x \\le x^{U} ,\n",
    "\\end{array}\n",
    "\\end{equation}\n",
    "\n",
    "where $x \\in \\mathbb{R}^{n}$ are the optimization variables (the device settings) whose lower and upper bounds, $x^{L}$ and $x^{U}$, are between 0 and 1 to ensure that the solution is within the gamut of the device, $f(x)$ is the objective function that aims to maximise contrast of the target photoreceptor(s), and $g(x)$ is a function that calculates contrast for the silenced photoreceptor(s), where $g^{L}$ and $g^{U}$ should be zero. $x$ is a vector containing the weights for the LED settings. \n",
    "\n",
    "Conveniently, *PySilSub* encapsulates this optimisation problem in a `SilentSubstitutionProblem` class that inherits everything from `StimulationDevice`, so we instantiate it in the same way, but this we include some additional information to condition the problem. As a basic demonstration, suppose we have calibration data for a linear, 8-bit, 5-primary stimulation system and that we want to find the settings for two spectra that will yield the maximum available contrast for melanopsin. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fe566a1-b4a8-4638-803b-3d6338f3bc85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wavelength</th>\n",
       "      <th>380</th>\n",
       "      <th>381</th>\n",
       "      <th>382</th>\n",
       "      <th>383</th>\n",
       "      <th>384</th>\n",
       "      <th>385</th>\n",
       "      <th>386</th>\n",
       "      <th>387</th>\n",
       "      <th>388</th>\n",
       "      <th>389</th>\n",
       "      <th>...</th>\n",
       "      <th>771</th>\n",
       "      <th>772</th>\n",
       "      <th>773</th>\n",
       "      <th>774</th>\n",
       "      <th>775</th>\n",
       "      <th>776</th>\n",
       "      <th>777</th>\n",
       "      <th>778</th>\n",
       "      <th>779</th>\n",
       "      <th>780</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Primary</th>\n",
       "      <th>Setting</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0</th>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.000068</td>\n",
       "      <td>0.000071</td>\n",
       "      <td>0.000062</td>\n",
       "      <td>0.000068</td>\n",
       "      <td>0.000055</td>\n",
       "      <td>0.000055</td>\n",
       "      <td>0.000064</td>\n",
       "      <td>0.000051</td>\n",
       "      <td>0.000063</td>\n",
       "      <td>0.000074</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000037</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000040</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000036</td>\n",
       "      <td>0.000032</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.000137</td>\n",
       "      <td>0.000141</td>\n",
       "      <td>0.000123</td>\n",
       "      <td>0.000136</td>\n",
       "      <td>0.000109</td>\n",
       "      <td>0.000111</td>\n",
       "      <td>0.000127</td>\n",
       "      <td>0.000101</td>\n",
       "      <td>0.000126</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000074</td>\n",
       "      <td>0.000077</td>\n",
       "      <td>0.000080</td>\n",
       "      <td>0.000079</td>\n",
       "      <td>0.000078</td>\n",
       "      <td>0.000078</td>\n",
       "      <td>0.000072</td>\n",
       "      <td>0.000064</td>\n",
       "      <td>0.000075</td>\n",
       "      <td>0.000075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.000205</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>0.000185</td>\n",
       "      <td>0.000204</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>0.000166</td>\n",
       "      <td>0.000191</td>\n",
       "      <td>0.000152</td>\n",
       "      <td>0.000189</td>\n",
       "      <td>0.000222</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000111</td>\n",
       "      <td>0.000116</td>\n",
       "      <td>0.000120</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>0.000117</td>\n",
       "      <td>0.000117</td>\n",
       "      <td>0.000108</td>\n",
       "      <td>0.000096</td>\n",
       "      <td>0.000113</td>\n",
       "      <td>0.000112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0.000274</td>\n",
       "      <td>0.000282</td>\n",
       "      <td>0.000247</td>\n",
       "      <td>0.000272</td>\n",
       "      <td>0.000219</td>\n",
       "      <td>0.000222</td>\n",
       "      <td>0.000254</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>0.000252</td>\n",
       "      <td>0.000296</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>0.000154</td>\n",
       "      <td>0.000160</td>\n",
       "      <td>0.000158</td>\n",
       "      <td>0.000157</td>\n",
       "      <td>0.000156</td>\n",
       "      <td>0.000144</td>\n",
       "      <td>0.000128</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.000149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">4</th>\n",
       "      <th>223</th>\n",
       "      <td>0.003027</td>\n",
       "      <td>0.003555</td>\n",
       "      <td>0.003159</td>\n",
       "      <td>0.003563</td>\n",
       "      <td>0.002712</td>\n",
       "      <td>0.002951</td>\n",
       "      <td>0.002827</td>\n",
       "      <td>0.002159</td>\n",
       "      <td>0.003197</td>\n",
       "      <td>0.003623</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001990</td>\n",
       "      <td>0.002227</td>\n",
       "      <td>0.002264</td>\n",
       "      <td>0.002182</td>\n",
       "      <td>0.002558</td>\n",
       "      <td>0.002361</td>\n",
       "      <td>0.002268</td>\n",
       "      <td>0.001905</td>\n",
       "      <td>0.002162</td>\n",
       "      <td>0.002360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>0.003135</td>\n",
       "      <td>0.003682</td>\n",
       "      <td>0.003271</td>\n",
       "      <td>0.003690</td>\n",
       "      <td>0.002808</td>\n",
       "      <td>0.003056</td>\n",
       "      <td>0.002928</td>\n",
       "      <td>0.002237</td>\n",
       "      <td>0.003311</td>\n",
       "      <td>0.003753</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002061</td>\n",
       "      <td>0.002306</td>\n",
       "      <td>0.002345</td>\n",
       "      <td>0.002259</td>\n",
       "      <td>0.002649</td>\n",
       "      <td>0.002446</td>\n",
       "      <td>0.002349</td>\n",
       "      <td>0.001973</td>\n",
       "      <td>0.002239</td>\n",
       "      <td>0.002445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>0.003243</td>\n",
       "      <td>0.003809</td>\n",
       "      <td>0.003384</td>\n",
       "      <td>0.003817</td>\n",
       "      <td>0.002905</td>\n",
       "      <td>0.003162</td>\n",
       "      <td>0.003029</td>\n",
       "      <td>0.002314</td>\n",
       "      <td>0.003426</td>\n",
       "      <td>0.003882</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002132</td>\n",
       "      <td>0.002386</td>\n",
       "      <td>0.002426</td>\n",
       "      <td>0.002337</td>\n",
       "      <td>0.002741</td>\n",
       "      <td>0.002530</td>\n",
       "      <td>0.002430</td>\n",
       "      <td>0.002041</td>\n",
       "      <td>0.002316</td>\n",
       "      <td>0.002529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>0.003351</td>\n",
       "      <td>0.003936</td>\n",
       "      <td>0.003497</td>\n",
       "      <td>0.003944</td>\n",
       "      <td>0.003002</td>\n",
       "      <td>0.003267</td>\n",
       "      <td>0.003130</td>\n",
       "      <td>0.002391</td>\n",
       "      <td>0.003540</td>\n",
       "      <td>0.004011</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002203</td>\n",
       "      <td>0.002465</td>\n",
       "      <td>0.002507</td>\n",
       "      <td>0.002415</td>\n",
       "      <td>0.002832</td>\n",
       "      <td>0.002614</td>\n",
       "      <td>0.002511</td>\n",
       "      <td>0.002109</td>\n",
       "      <td>0.002394</td>\n",
       "      <td>0.002613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>0.003459</td>\n",
       "      <td>0.004063</td>\n",
       "      <td>0.003610</td>\n",
       "      <td>0.004071</td>\n",
       "      <td>0.003099</td>\n",
       "      <td>0.003373</td>\n",
       "      <td>0.003231</td>\n",
       "      <td>0.002468</td>\n",
       "      <td>0.003654</td>\n",
       "      <td>0.004141</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>0.002545</td>\n",
       "      <td>0.002587</td>\n",
       "      <td>0.002493</td>\n",
       "      <td>0.002923</td>\n",
       "      <td>0.002699</td>\n",
       "      <td>0.002592</td>\n",
       "      <td>0.002177</td>\n",
       "      <td>0.002471</td>\n",
       "      <td>0.002698</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>165 rows × 401 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Wavelength            380       381       382       383       384       385  \\\n",
       "Primary Setting                                                               \n",
       "0       0        0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "        7        0.000068  0.000071  0.000062  0.000068  0.000055  0.000055   \n",
       "        15       0.000137  0.000141  0.000123  0.000136  0.000109  0.000111   \n",
       "        23       0.000205  0.000212  0.000185  0.000204  0.000164  0.000166   \n",
       "        31       0.000274  0.000282  0.000247  0.000272  0.000219  0.000222   \n",
       "...                   ...       ...       ...       ...       ...       ...   \n",
       "4       223      0.003027  0.003555  0.003159  0.003563  0.002712  0.002951   \n",
       "        231      0.003135  0.003682  0.003271  0.003690  0.002808  0.003056   \n",
       "        239      0.003243  0.003809  0.003384  0.003817  0.002905  0.003162   \n",
       "        247      0.003351  0.003936  0.003497  0.003944  0.003002  0.003267   \n",
       "        255      0.003459  0.004063  0.003610  0.004071  0.003099  0.003373   \n",
       "\n",
       "Wavelength            386       387       388       389  ...       771  \\\n",
       "Primary Setting                                          ...             \n",
       "0       0        0.000000  0.000000  0.000000  0.000000  ...  0.000000   \n",
       "        7        0.000064  0.000051  0.000063  0.000074  ...  0.000037   \n",
       "        15       0.000127  0.000101  0.000126  0.000148  ...  0.000074   \n",
       "        23       0.000191  0.000152  0.000189  0.000222  ...  0.000111   \n",
       "        31       0.000254  0.000202  0.000252  0.000296  ...  0.000148   \n",
       "...                   ...       ...       ...       ...  ...       ...   \n",
       "4       223      0.002827  0.002159  0.003197  0.003623  ...  0.001990   \n",
       "        231      0.002928  0.002237  0.003311  0.003753  ...  0.002061   \n",
       "        239      0.003029  0.002314  0.003426  0.003882  ...  0.002132   \n",
       "        247      0.003130  0.002391  0.003540  0.004011  ...  0.002203   \n",
       "        255      0.003231  0.002468  0.003654  0.004141  ...  0.002274   \n",
       "\n",
       "Wavelength            772       773       774       775       776       777  \\\n",
       "Primary Setting                                                               \n",
       "0       0        0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "        7        0.000039  0.000040  0.000039  0.000039  0.000039  0.000036   \n",
       "        15       0.000077  0.000080  0.000079  0.000078  0.000078  0.000072   \n",
       "        23       0.000116  0.000120  0.000118  0.000117  0.000117  0.000108   \n",
       "        31       0.000154  0.000160  0.000158  0.000157  0.000156  0.000144   \n",
       "...                   ...       ...       ...       ...       ...       ...   \n",
       "4       223      0.002227  0.002264  0.002182  0.002558  0.002361  0.002268   \n",
       "        231      0.002306  0.002345  0.002259  0.002649  0.002446  0.002349   \n",
       "        239      0.002386  0.002426  0.002337  0.002741  0.002530  0.002430   \n",
       "        247      0.002465  0.002507  0.002415  0.002832  0.002614  0.002511   \n",
       "        255      0.002545  0.002587  0.002493  0.002923  0.002699  0.002592   \n",
       "\n",
       "Wavelength            778       779       780  \n",
       "Primary Setting                                \n",
       "0       0        0.000000  0.000000  0.000000  \n",
       "        7        0.000032  0.000038  0.000037  \n",
       "        15       0.000064  0.000075  0.000075  \n",
       "        23       0.000096  0.000113  0.000112  \n",
       "        31       0.000128  0.000151  0.000149  \n",
       "...                   ...       ...       ...  \n",
       "4       223      0.001905  0.002162  0.002360  \n",
       "        231      0.001973  0.002239  0.002445  \n",
       "        239      0.002041  0.002316  0.002529  \n",
       "        247      0.002109  0.002394  0.002613  \n",
       "        255      0.002177  0.002471  0.002698  \n",
       "\n",
       "[165 rows x 401 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from pysilsub.problem import SilentSubstitutionProblem\n",
    "\n",
    "# Load the calibration data\n",
    "spds = pd.read_csv(\n",
    "    '../../data/BCGAR_5_Primary_8_bit_linear.csv', \n",
    "    index_col=['Primary','Setting'])\n",
    "spds.columns = pd.Int64Index(spds.columns.astype(int))\n",
    "spds.columns.name = 'Wavelength'\n",
    "\n",
    "# List of colors for the primaries\n",
    "colors = ['blue', 'cyan', 'green', 'orange', 'red'] \n",
    "\n",
    "spds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc659f72-ee3e-45fd-958c-5b3c8943c26a",
   "metadata": {},
   "source": [
    "We can use these data to create a `SilentSubstitutionProblem`, just like we did with `StimulationDevice`, only this time we specify which receptors to ignore, which receptors to silence, and which receptors to isolate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9ed1e03f-d8fd-4162-b222-c1674a8f6adc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pysilsub.problem import SilentSubstitutionProblem as SSP\n",
    "\n",
    "ssp = SSP(\n",
    "    resolutions=[255]*5,  # Five 8-bit primaries\n",
    "    colors=colors,  # Colors of the LEDs\n",
    "    spds=spds,  # The calibration data\n",
    "    spd_binwidth=1,  # SPD wavelength binwidth\n",
    "    ignore=['R'],  # Ignore rods\n",
    "    silence=['S', 'M', 'L'],  # Silence S-, M-, and L-cones\n",
    "    isolate=['I'],  # Isolate melanopsin\n",
    "    target_contrast=2.5,  # Aim for 200% contrast \n",
    "    name='BCGAR (8-bit, linear)'  # Description of device\n",
    ") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "626757e6-f0b7-400c-8565-13da44fe931f",
   "metadata": {},
   "source": [
    "Because `StimulationDevice` is the base class we can do all the cool things described [here](03a_stimulation_devices.ipynb), like plotting the spds and the gamut of the device. But lets get straight on to the optimisation..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5c9576c-c113-4cc8-8f72-6810fbdc8496",
   "metadata": {},
   "source": [
    "As a general note, numerical optimisation is a big old topic and there are many algorithms to choose from, each with their own idiosynchrasies. At present, *PySilSub* does not know the best algorithm for your stimulation device and research goals, nor does it unite different algorithms under a common calling syntax. It simply encapsulates your problem in the form of ready made functions that you can pass to an optimiser. So, If you are new to optimisation in Python, its worth investing a bit of time of time to learn the basics. [This article](https://realpython.com/python-scipy-cluster-optimize/) is a good place to start. \n",
    "\n",
    "Though it's not the only option, Scipy's `optimize` module is comprehensive and contains a range of methods for local and global optisation with linear or nonlinear constraints. For this example, we will use the `optimize.minimize` function with the [SLSQP](https://docs.scipy.org/doc/scipy-1.8.0/html-scipyorg/reference/optimize.minimize-slsqp.html) solver. See the worked examples for further inspiration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b57e7476-1f1b-4f5d-9d52-618bc181b43c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "     fun: 1.2796721117492244e-09\n",
       "     jac: array([  4.83906830e-03,   9.33995462e-03,   7.52382248e-03,\n",
       "         1.17191902e-03,   1.82212749e-04,  -1.56916899e-03,\n",
       "        -2.30584906e-03,  -1.86197938e-03,  -3.82025788e-04,\n",
       "        -4.55471479e-05])\n",
       " message: 'Optimization terminated successfully'\n",
       "    nfev: 593\n",
       "     nit: 51\n",
       "    njev: 51\n",
       "  status: 0\n",
       " success: True\n",
       "       x: array([  4.48991203e-02,   3.80317793e-19,   1.41115689e-18,\n",
       "         1.44533939e-01,   0.00000000e+00,   0.00000000e+00,\n",
       "         3.73683328e-02,   1.39506427e-01,   5.53536031e-18,\n",
       "         1.00000000e+00])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.optimize import minimize\n",
    "\n",
    "# Define constraints in the standard scipy format\n",
    "constraints = ({\n",
    "    'type': 'eq',\n",
    "    'fun': ssp.silencing_constraint,\n",
    "    'ftol': 1e-07\n",
    "    })\n",
    "\n",
    "# Perform the optimisation\n",
    "result = minimize(\n",
    "    fun=ssp.objective_function,\n",
    "    x0=ssp.initial_guess_x0(),\n",
    "    method='SLSQP',\n",
    "    bounds=ssp.bounds,\n",
    "    constraints=constraints,\n",
    "    tol=1e-07\n",
    ")\n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8f2a0c3-b395-4ab0-9183-da362bd01537",
   "metadata": {},
   "source": [
    "Printed above is the result of the optimisation in Scipy's standard `OptimizationResult` format. The low value of `fun` indicates that we are very close to the target contrast of 250%. Unsurprisingly, what we actually need is `result.x`. Visualising it is straight forward."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cbca902e-1289-4587-87ff-609e6d3625f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tBackground luminance: 1574.9694146136112\n",
      "\tModulation luminance: 1574.931215982132\n",
      "\tBackground xy: [ 0.51227803  0.36152737]\n",
      "\tModulation xy: [ 0.51220947  0.36157177]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "result_fig = ssp.plot_ss_result(result.x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "027c2e7a-4be3-4ecf-b951-fb81bf8c6cd3",
   "metadata": {},
   "source": [
    "Woohoo, a pair of silent substitution spectra. All we need to do now is convert the optimisation result to 8-bit settings required by the stimulation device."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac1f364f-88a7-4636-b1c2-35376c28195d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[11, 0, 0, 36, 0]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bg_settings = ssp.weights_to_settings(result.x[:5])\n",
    "bg_settings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ad42a7cf-8bac-4caa-b21d-4907607a79f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 9, 35, 0, 255]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod_settings = ssp.weights_to_settings(result.x[5:])\n",
    "mod_settings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ae85e48-1675-4a71-9758-665004032842",
   "metadata": {},
   "source": [
    "All being well, if we pass these settings to the stimulation device it will produce these two spectra. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a3894ea-0d04-47bb-8df0-3d588ba20cce",
   "metadata": {},
   "source": [
    "Linear algebra\n",
    "--------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ccd54b8-4eb3-4082-aa5c-b47b3dc7cbb1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
